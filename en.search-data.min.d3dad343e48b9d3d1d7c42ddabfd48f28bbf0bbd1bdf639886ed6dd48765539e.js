'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/page-one/','title':"Page One",'content':""});index.add({'id':1,'href':'/categories/','title':"Categories",'content':""});index.add({'id':2,'href':'/docs/','title':"Docs",'content':""});index.add({'id':3,'href':'/','title':"Introduction",'content':"Glaðsheimr  \nThe fifth is Glaðsheimr,\nand gold-bright there\nStands Valhöll stretching wide;\nAnd there does Oðinn\neach day choose\nThe men who have fallen in fight.\nGrímnismál, The says of Grímnir\n  Vision Glaðsheimr is an open project to research building complete applications that are capable of providing true privacy and transparency to end users. Research is focused on developing use cases and technologies that leverages concepts such as TinyML, FGPAs and concepts of orchestration. Glaðsheimr will also be develop tooling (Mjolnir) to allow application developers to design, build and orchestrate applications.\nWhat is Orchestration? Orchestration is the automatic process of managing or scheduling the work of individual components (models, sensors, frontend) within multiple devices. Orchestration automates such things as configuration, availability, provisioning and health monitoring of the application.\nOrchestration is a common concept in web development (with projects such as Kubernetes) although the scope for orchestration in Mjölnir.\nProof Of Concepts  Vatn: Does your water intake increases morning energy?  Water tracking: Audio signals based on poured water Person energy: Time spent in bed tracked with human presence or sleep tracking Integration using only bluetooth mesh protocols   Another concept is built around exploring metabolic syndrome  Contributors  Kartik Thakore  What\u0026rsquo;s with the names? I am just a geek who loves mythos and lately I have been reading old norse mythos and poems.\n Glaðsheimr Is the realm in which Odin\u0026rsquo;s hall of Valhalla Mjölnir Though most famous for its use as a weapon, Mjolnir played a vital role in Norse religious practices and rituals. Vatn Old norse word for water  "});index.add({'id':4,'href':'/docs/research/orchestration/','title':"Orchestration",'content':"Hybrid Device Applications The ability to leverage FPGA, Microcontrollers and ASIC devices is that TinyML application can take advantage of each devices\u0026rsquo; specialties.\nFPGAs can provide low latency (\u0026lt;= 1ms), amazing connectivity (direct pin access) and potential low power consumption depending on the application. One the other hand micro-controller significantly reduce engineering time. (See other advantages of other device types).\nConcept Predicting water pouring in a room\nCollecting audio and classification can be currently done using TinyML and PDM devices (Tensorflow Lite Micro). On the Arduino Nano Sense 33 there is a delay in the inference from the input to after the processing.\nImagining a simple application deployed on an FPGA and Arduino device. Using orchestration we can see what services are live and even capture logs from devices for inspection.\nKnown deployed services:\n$ mjl services NAME TYPE PROTOCOLS AGE AudioClassifier TinyFPGA GPIO 2m0s MjlDriver ArduinoBLE33 BLE 2m1s Looking for devices:\n$ mjl devices NAME TYPE PROTOCOLS AGE AudioClassifier-a2a3fb TinyFPGA GPIO 2m0s MjlDriver-12e21b ArduinoBLE33 BLE 2m1s Inspecting devices:\n$ mjl inspect --device AudioClassifier-12e21b --proto GPIO --format pickle \u0026gt; Discovering AudioClassifier-12e21b \u0026gt; Found trough MjlDriver-12e21b \u0026gt; Connecting to MjlDriver-12e21b \u0026gt; Inspecting AudioClassifier-12e21b \u0026gt; Found input and output stream at BLE service a369d1b3-fcf2-4159-84a8-a5751c7b657c \u0026gt; Input BLECharacteristic 347f9f7b-a71d-4d8d-b6dd-8c416270b329 \u0026gt; Ouput BLECharacteristic ae2e723e-c297-4f13-8500-181d01bf2779 Writing binary stream to inspections/AudioClassifier-12e21b/347f9f7b.pickle Writing binary stream to inspections/AudioClassifier-12e21b/ae2e723e.pickle Horizontal Scaling With horizontal scaling the same application can be deployed over several devices. These devices can be placed in multiple locations:\n$ mjl devices NAME TYPE PROTOCOLS AGE AudioClassifier-8675c4e7 TinyFPGA GPIO 2m0s MjlDriver-82f85197 ArduinoBLE33 BLE 2m1s AudioClassifier-a369d1b3 TinyFPGA GPIO 2m0s MjlDriver-9a9c1082 ArduinoBLE33 BLE 2m1s AudioClassifier-129c0801 TinyFPGA GPIO 2m0s MjlDriver-9a9c1082 ArduinoBLE33 BLE 2m1s Inspection can aggregate across devices and get a quorum of results.\n$ mjl inspection --service AudioClassifier AudioClassifier service aggregating results across 3 devices. Writing to inspections/AudioClassifier/out-9c0db0f2.pickle import pickle from mjl.aggregator import Aggregator filename = \u0026#34;./inspections/AudioClassifier/out-9c0db0f2.pickle\u0026#34; results = open(filename,\u0026#39;wb\u0026#39;) results_tuples = pickle.load(results) # ( # (1582405387.819107, 1, \u0026#34;AudioClassifier-129c0801\u0026#34;),  # (1582405387.819125, 1, \u0026#34;AudioClassifier-a369d1b3\u0026#34;),  ... # (1582405387.8191419, 0, \u0026#34;AudioClassifier-a369d1b3\u0026#34;),  # (1582405387.819145, 1, \u0026#34;AudioClassifier-8675c4e7\u0026#34;) # ) quorum = Aggregator(quorum=True, window=\u0026#34;3ms\u0026#34;).results(results_tuple) # ( # (1582405387, 1) ... # (1582435389, 0),  # (1582435399, 1) # ) results.close() These results can be put together on a raspberry pi or even on a mobile device when in locale area. The mjl tool allows for development and testing. Testing can be done in this case with a laptop playing sample sounds randomly. The raw results allows for retraining the models and deploying them.\nVertical Scaling Vertical scaling would be the process of letting multiple devices run the same application by distributing processing. For example: having devices request resources and processing from each other over BLE or Direct pin access.\n"});index.add({'id':5,'href':'/docs/proof_of_concepts/vant/','title':"Proof of Concept",'content':"By Kartik Thakore\nVant Vant is a\n"});index.add({'id':6,'href':'/docs/research/','title':"Research",'content':"Research by Kartik Thakore\nGlaðsheimr research is based around a vision:\nOrchestrating and integrating ML, devices and engineering principles to provide complete stack applications as opposed to full stack\nCybernetics and Mobile Health An Complete Stack Application\nDefining cybernetics as a merger between hardware, software and biology we can imagine health (behavior change) apps today as such a device.\n sequenceDiagram Alice-App: Sets goal App-Alice: recommends caloric tracking program Alice-Alice's Biology: Implements program Alice's Biology-Alice: Homeostatic and Physiological Resistance Alice's Biology-Alice's Devices: Automated Tracking Alice's Devices-App: Tracking integrated App-Alice: Updated recommendations Inefficient Integrations In this case Alice, her biology, software on the app and wearable devices are integrated into an overall goal; Making Alice Healthy. This type of complete stack application are requires extra steps to provide a lack luster solution (mobile health apps are notoriously bad at achieving results and health is hard). Data used to determine successes of the application is derivative and the end results of numerous processes.\nThere are a plethora of moving parts and engineering wise this solution is not idea. In integration we want to have a simple critical path that allows:\n Measurable feedback independent of human bias (people lie about their weight regularly) Reduce unnecessary interfacing components Remove artificial boundaries in development  Biology is not understood at app development level Algorithms are unaware of how to determine a success/failure Alice has to understand how to implement the program    Back to the Drawing Board Focusing on the goal \u0026ldquo;Making Alice Healthy\u0026rdquo; we can start to re-engineer a concrete solution. For the purpose of this exercise let\u0026rsquo;s determine health based on most common diseases for Alice\u0026rsquo;s cohort (54F, High BMI, Hyperglycimia). Although Health could be defined medically, we also have to consider how Alice determines healthy and thus focusing on quality of life makes more sense. Alice\u0026rsquo;s overall lifestyles plays a larger part in determining what Health means.\nLet\u0026rsquo;s say that top causes of loss of quality of life for Alice\u0026rsquo;s cohort are metabolic syndrome1 (which wouldn\u0026rsquo;t be too unreasonable). Digesting these diseases into biological signals would provided the most efficient interface to measuring success of our complete stack application.\nMeasuring with Biological Signals\n Waist Circumference Triglycerides HDL Cholesterol Blood Pressure Fasting Glucose  Using these signals gives a clearer picture of \u0026ldquo;health\u0026rdquo;, and treating these as outputs from \u0026ldquo;Alice\u0026rsquo;s Biology\u0026rdquo; is a good starting point. The most frequent signal used is Waist Circumference which should be simple to collected in the morning when Alice wakes up. Waist circumference can be measured in the bathroom and to meet privacy concerns with a disconnected smart device (this device would not connect to any server).\nThe waist circumference measurements (with measurement errors) would then be collected to a device that is able to aggregate with other signals (either from external sources or locally). In the case of Alice, let\u0026rsquo;s imagine the solution to have:\n Waister: Waist Circumference - FPGAs + Camera in washroom GoodFood: Food Quality - FPGAs + Cameras in Kitchen TooManyCooks: Cooking Frequency - Presence detection TinyML Device AliceHealth: Labeling and Data Update - Mobile App  Each of these services can be put into a local cloud or more apt endpoint cloud.\nEndpoint Cloud graph TD A[Alice] --| Labels | B(Alice Health App) B -- R{should retrain ?} R -- C(Training Device) C --| Deploys | D[TooManyCooks] C --| Deploys | E[Waister] C --| Deploys | F[GoodFood] D --| Presence Detected\nin Kitchen | F[Signal Aggregrator] E --| Waist\nCircumference\nMeasurement | F F --| Low Power Bluetooth Collection | B In this scenario locality of computation, modelling and data is kept to where Alice is and where her health matters. Developing such an application requires a few underlying components:\n Signal Aggregator - Arudino BLE Training Device - Raspberry Pi or Coral Device  These components need to part of the orchestration fabric. The major advantages to this step is the fewest number of integrations back to a central server that is out of control/hand for Alice. Additionally, in this complete stack the focus is completely relevant to specific biological signals that don\u0026rsquo;t require integration with other partners. Finally, Alice has complete control of her data and models that are used to help her. Everything is owned by her.\nNext Steps   Deploy a hybrid application to multiple devices\n Use mjl to config/deploy/monitor an application    Orchestration of applications (horizontal/vertical)\n FPGAs  Same application over multiple FPGAs One application over several FPGAs Clustered services over FPGA   Micro-controller driver orchestration  Data extraction and transmission for services        https://www.mayoclinic.org/diseases-conditions/metabolic-syndrome/symptoms-causes/syc-20351916 \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':7,'href':'/tags/','title':"Tags",'content':""});})();