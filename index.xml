<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Glaðsheimr</title>
    <link>/</link>
    <description>Recent content in Introduction on Glaðsheimr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/docs/page-one/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/page-one/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Orchestration</title>
      <link>/docs/research/orchestration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/research/orchestration/</guid>
      <description>Hybrid Device Applications The ability to leverage FPGA, Microcontrollers and ASIC devices is that TinyML application can take advantage of each devices&amp;rsquo; specialties.
FPGAs can provide low latency (&amp;lt;= 1ms), amazing connectivity (direct pin access) and potential low power consumption depending on the application. One the other hand micro-controller significantly reduce engineering time. (See other advantages of other device types).
Concept Predicting water pouring in a room
Collecting audio and classification can be currently done using TinyML and PDM devices (Tensorflow Lite Micro).</description>
    </item>
    
    <item>
      <title>Proof of Concepts</title>
      <link>/docs/proof_of_concepts/audio-fpga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/proof_of_concepts/audio-fpga/</guid>
      <description>Audio, Arduino and FPGA In this proof of concept we want to showcase how multiple devices can be used to build the an application (detect keywords in sounds).
Overview The application will replicate another TinyML proof of concept that was demonstrated in Tensorflow Lite Micro. The PoC infers command words on PDM (Pulse Density Modulation) signals. The code and documentation for this application is available on the Tensorflow github repo.</description>
    </item>
    
  </channel>
</rss>